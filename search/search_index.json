{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction to TextObjects","text":""},{"location":"#credits","title":"Credits","text":"<p>This module was created by Matt.</p> <ul> <li>Roblox \u2192 @exqvy</li> <li>GitHub \u2192 @love.buggedd</li> <li>Other \u2192 @xyb</li> </ul>"},{"location":"#summary","title":"Summary","text":"<p>TextObjects is a module inspired by Defaultio's RichText made in 2017. As of versions 1.0+ customization based on purely scripting is the only available means of customization for the Text Objects.</p> <p>Let's start by creating a Text Object: <pre><code>local TextObjects = require(TextObjects)\nlocal Frame = script.Parent\n\nlocal TextParameters: TextObjects.TextParameters = {}\nlocal Text = TextObjects.new(\n    Frame, \n    TextParameters\n)\n\nText:CreateSequence(\"Hello, World!\")\n</code></pre></p> <p>Info</p> <p>This is the basic constructor for a dynamic Text Label object (TextObject). You're going to be doing a lot\u2014if not all your coding inside of the <code>TextParameters</code>; so it's a very important part of your code!</p> <p>The <code>Frame</code> doesn't necessarily have to be an actual frame, as long as it's apart of the <code>GuiObject</code> type it'll work.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v14-march-10-2025","title":"v1.4 \u2192 March 10, 2025","text":"<p>This marks the public release of the TextObject module. A highly flexible and customizable text creation module that's used for Roblox.</p> <p>This is a general jist, extensive info in the API.</p>"},{"location":"changelog/#added","title":"Added","text":"<ul> <li>TextParameters, allowing for all the customization inside each Dynamic Text Object.</li> <li>[TextParameters] \u2192 Customization for Letters, Words, and Lines.</li> <li>[TextParameters] \u2192 Mouse functions for clicking, and hovering.</li> <li>Themes, affecting the three accessible elements. Allows for the customization of each individual element.</li> </ul> <p>Info</p> <p>The creation of themes is to prevent the overuse of <code>AnimateFunctions</code>. Please use each of them for their intended use, prior adjustments to one of the elements the <code>Themes</code> should be used. Entrances and animations should be put in <code>AnimateFunctions</code>.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#method-1","title":"Method 1","text":"<ol> <li>Go the latest releases page.</li> <li>Under Assets, download <code>TextObjects.rbxm</code>.</li> <li>Inside studio, drag the downloaded file into your game. Put it anywhere you like; most commonly, in <code>ReplicatedStorage</code>.</li> </ol>"},{"location":"api/","title":"TextObjects","text":""},{"location":"api/#constructors","title":"Constructors","text":""},{"location":"api/#new","title":"new","text":"<p><pre><code>local Text = TextObjects.new(Target, TextParameters)\n</code></pre> This constructor (and only constructor) declares a Text Object. All sequences created by this Object will be created according to everything inside of the <code>TextParameters</code> table. The <code>Target</code>, being the first parameter of the constructor is where the text will be rendered. (Takes any GuiObject)</p>"},{"location":"api/#methods","title":"Methods","text":""},{"location":"api/#createsequence","title":"CreateSequence","text":"<p><pre><code>Text:CreateSequence(\"Hello, World!\")\n</code></pre> Creates and automatically plays the text sequence with the provided text (in parameter one). This module organizes your inputted text into the <code>Target</code> parent; and proceeds to output the created elements according to the <code>TextParameters</code>.</p>"},{"location":"api/#destroysequence","title":"DestroySequence","text":"<p><pre><code>--# Destroys the text instantly\nText:DestroySequence()\n\n--# Customized destruction\nText:DestroySequence(function()\n    --[[\n        Animation code here\n\n        Example code below\n    --]]\n    local DeathTime = 1\n    for _, Letter in ipairs(Text.__letters) do\n        game:GetService(\"TweenService\"):Create(\n            Letter,\n            TweenInfo.new(DeathTime),\n            {TextTransparency = 1}\n        ):Play()\n    end\n\n    wait(DeathTime)\nend)\n</code></pre> Without an inputted function (executes before everything else if added) the Sequence will completely destroy itself. Adding the function parameter allows you to customize what the sequence does before being destroyed. Like the example code, where it fades out all the text at once before deleting everything.</p>"},{"location":"api/#events","title":"Events","text":""},{"location":"api/#sequenceended","title":"SequenceEnded","text":"<p><pre><code>Text.SequenceEnded:Fire()\n\nText.SequenceEnded:Connect(function()\n    -- Code here\nend)\n</code></pre> In the <code>TextParameters</code>, if AnimateText\u2014a boolean is set to false (for notice that's the default) the SequenceEnded event will fire instantaneously. If not, then the user has to manually fire it. Likely in the <code>AnimateFunctions</code>.</p>"},{"location":"api/params/","title":"Text Parameters","text":""},{"location":"api/params/#textfont","title":"TextFont","text":"<p>The <code>TextFont</code> is used to determine how the Text Object will render its text.</p> <p>Warning</p> <p>Avoid using the <code>Legacy</code> font, it will mess with scaling and overall text-fitting. The result will not be as pretty as if you were to use compatible fonts.</p>"},{"location":"api/params/#textcolor","title":"TextColor","text":"<p>Changes the base color for the Text Object. All text will this color unless adjusted.</p>"},{"location":"api/params/#textsize","title":"TextSize","text":"<p>Changes the base size for the Tex Object. Serves as a reference for <code>pixel scaling</code> in the <code>TextScaleRelativeTo</code> options.</p>"},{"location":"api/params/#textscaled","title":"TextScaled","text":"<p>Toggles if the Text Object's text will be rendered appropriately to <code>TextScaleRelativeTo</code>'s value.</p>"},{"location":"api/params/#textscalerelativeto","title":"TextScaleRelativeTo","text":"<p>This option has three different modes.</p> <ul> <li> <p>Relative to <code>\"Screen\"</code> <sup>Text will scale according to the screen size.</sup></p> </li> <li> <p>Relative to <code>\"Parent\"</code> <sup>Text will scale according to the Text Object target's size.</sup></p> </li> <li> <p>Relative to a Pixel Reference</p> </li> </ul> <p>This specific mode has two different variations. It can either be a number, or a array containing two numbers. This is a subtype of Screen relative sizing.</p> <ol> <li> <p><code>TextSize = Screen.AbsoluteSize.Y / ReferenceSize</code></p> </li> <li> <p><code>TextSize = ( Screen.AbsoluteSize.Y / ReferenceSize ) ^ Growth</code></p> </li> </ol> <p>Tip</p> <p>Pixel Reference scaling is incredibly useful for things like mobile friendliness. Adjusting the growth factor allows for extremely flexible text sizing for all devices! Your playerbase will thank you.</p>"},{"location":"api/params/#lettergrouping","title":"LetterGrouping","text":"<p>Toggles if the sequencing will use letter grouping (words are put as groups). If not everything is stored as a character, instead of characters in groups (words).</p> <p>Warning</p> <p>This will disable <code>Words</code> in the <code>AnimateFunctions</code>.</p>"},{"location":"api/params/#maxwidth","title":"MaxWidth","text":"<p>Sets the MaxWidth to any number, defaults to <code>math.huge</code>.</p>"},{"location":"api/params/#padding","title":"Padding","text":"<p>Creates a <code>UIPadding</code> for the sequence text. Something that almost every dialogue system needs. If you don't want to do it yourself, this'll do it for you! This can either be set to a singular number to be set to every value or you can adjust each individual value. <pre><code>Padding = 0.25\n\n--# or\n\nPadding = {\n    Top = 0.2,\n    Left = 0.3,\n    Right = 0.3,\n    Bottom = 0.2\n}\n</code></pre></p>"},{"location":"api/params/#alignments","title":"Alignments","text":"<ol> <li>XAlignment: <code>Enum.HorizontalAlignment</code></li> <li>YAlignment: <code>Enum.VerticalAlignment</code></li> </ol> <p>Sets the <code>UIListLayout</code> alignment settings for the lines.</p>"},{"location":"api/params/#themes","title":"Themes","text":"<ol> <li>Lines: <code>{{Name: string, Value: any}}</code></li> <li>Containers: <code>{{Name: string, Value: any}}</code></li> <li>Letters: <code>{{Name: string, Value: any}}</code></li> </ol> <p>Adjusts the \"theme\" of the three core elements Text Objects render. This basically just allows you to adjust their respective properties individually. (e.g. Changing the background of letters to visible.) <pre><code>Themes.Letters = {\n    {Name = \"BackgroundTransparency\", Value = 0}\n    {Name = \"BackgroundColor3\", Value = Color3.new(0, 0, 0)}\n}\n</code></pre></p>"},{"location":"api/params/#animatetext","title":"AnimateText","text":"<p>A boolean that toggles if a text is animated. (User Scripted) <sup>Preset animations &amp; entrances will be introduced in update 2.0+</sup></p>"},{"location":"api/params/#animatefunctions","title":"AnimateFunctions","text":"<ol> <li>Letters: <code>(Letter: TextLabel, number) \u2192 ()</code></li> <li>Words: <code>(Word: TextLabel, number) \u2192 ()</code></li> <li>Lines: <code>(Line: {Line: Frame, Container: Frame}, number) \u2192 ()</code></li> </ol> <p>If you're unsure what the text above means, basically each function has two parameters. One with the individual letter, word, or line, and the second parameter being the number of whatever one you're on. Please look at the code below as it contains an important piece of information about the Animate Functions. <pre><code>AnimateFunctions = {\n    Letters = function (Letter: TextLabel, Index: number)\n        -- Code here\n    end,\n\n    Words = function (Word: TextLabel, Index: number)\n        -- Code here\n    end,\n\n    Lines = function (LineTable: {}, Index: number)\n        --[[\n            Lines are actually tables, containing two instances.\n            The actual line, and the container with the words &amp; letters.\n        --]]\n        local Line = LineTable.Line\n        local Container = LineTable.Container\n\n        -- Code here\n    end,\n}\n</code></pre></p>"},{"location":"api/params/#spacings","title":"Spacings","text":"<ol> <li>LetterSpacing</li> <li>WordSpacing</li> <li>LineSpacing</li> </ol> <p>All of these intake a number, each acting as a multiplier. Think of it as the scale instead of offset of Udim2; just for Text Object spacing.</p>"},{"location":"api/params/#onclick","title":"OnClick","text":"<p>Calls a function, (scripted by the user) when the Text Object target is pressed. <pre><code>OnClick = function (x, y)\n    -- Code here\nend,\n</code></pre></p>"},{"location":"api/params/#onhoverenter","title":"OnHoverEnter","text":"<p>Calls a function whenever the Text Object target is hovered over by the player's mouse. <pre><code>OnHoverEnter = function (x, y)\n    -- Code here\nend,\n</code></pre></p>"},{"location":"api/params/#onhoverleave","title":"OnHoverLeave","text":"<p>Calls a function whenever the player's mouse stops hovering the Text Object's target. <pre><code>OnHoverLeave = function (x, y)\n    -- Code here\nend,\n</code></pre></p>"},{"location":"api/params/#onlongpress","title":"OnLongPress","text":"<p>Calls a function when the player clicks for more than half a second. <pre><code>OnLongPress = function (x, y)\n    -- Code here\nend,\n</code></pre></p>"},{"location":"api/params/#onclickrelease","title":"OnClickRelease","text":"<p>Calls a function when the player finishes clicking. <pre><code>OnClickRelease = function (x, y)\n    -- Code here\nend,\n</code></pre></p>"},{"location":"api/params/#beforetext","title":"BeforeText","text":"<p>A function that's called before the sequence is started. ```lua BeforeText = function ()     -- Code here     return nil end,</p>"}]}